{"mappings":"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","sources":["JS/main.js"],"sourcesContent":["\r\n\r\n\r\n// return a random number within a range\r\nfunction random(min, max) {\r\n  return Math.random() * (max - min) + min;\r\n}\r\n\r\n// map a number from 1 range to another\r\nfunction map(n, start1, end1, start2, end2) {\r\n  return ((n - start1) / (end1 - start1)) * (end2 - start2) + start2;\r\n}\r\n\r\nconst simplex = new SimplexNoise();\r\n\r\nclass ColorPalette {\r\n  constructor() {\r\n    this.setColors();\r\n    this.setCustomProperties();\r\n  }\r\n\r\n  setColors() {\r\n    // pick a random hue somewhere between 220 and 360\r\n    this.hue = ~~random(220, 360);\r\n    this.complimentaryHue1 = this.hue + 30;\r\n    this.complimentaryHue2 = this.hue + 60;\r\n    // define a fixed saturation and lightness\r\n    this.saturation = 95;\r\n    this.lightness = 50;\r\n\r\n    // define a base color\r\n    this.baseColor = hsl(this.hue, this.saturation, this.lightness);\r\n    // define a complimentary color, 30 degress away from the base\r\n    this.complimentaryColor1 = hsl(\r\n      this.complimentaryHue1,\r\n      this.saturation,\r\n      this.lightness\r\n    );\r\n    // define a second complimentary color, 60 degrees away from the base\r\n    this.complimentaryColor2 = hsl(\r\n      this.complimentaryHue2,\r\n      this.saturation,\r\n      this.lightness\r\n    );\r\n\r\n    // store the color choices in an array so that a random one can be picked later\r\n    this.colorChoices = [\r\n      this.baseColor,\r\n      this.complimentaryColor1,\r\n      this.complimentaryColor2,\r\n    ];\r\n  }\r\n\r\n  randomColor() {\r\n    // pick a random color\r\n    return this.colorChoices[~~random(0, this.colorChoices.length)].replace(\r\n      '#',\r\n      '0x'\r\n    );\r\n  }\r\n\r\n  setCustomProperties() {\r\n    // set CSS custom properties so that the colors defined here can be used throughout the UI\r\n    document.documentElement.style.setProperty('--hue', this.hue);\r\n    document.documentElement.style.setProperty(\r\n      '--hue-complimentary1',\r\n      this.complimentaryHue1\r\n    );\r\n    document.documentElement.style.setProperty(\r\n      '--hue-complimentary2',\r\n      this.complimentaryHue2\r\n    );\r\n  }\r\n}\r\n\r\n\r\n// Orb class\r\nclass Orb {\r\n  // Pixi takes hex colors as hexidecimal literals (0x rather than a string with '#')\r\n  constructor(fill = 0x000000) {\r\n    // bounds = the area an orb is \"allowed\" to move within\r\n    this.bounds = this.setBounds();\r\n    // initialise the orb's { x, y } values to a random point within it's bounds\r\n    this.x = random(this.bounds['x'].min, this.bounds['x'].max);\r\n    this.y = random(this.bounds['y'].min, this.bounds['y'].max);\r\n\r\n    // how large the orb is vs it's original radius (this will modulate over time)\r\n    this.scale = 1;\r\n\r\n    // what color is the orb?\r\n    this.fill = fill;\r\n\r\n    // the original radius of the orb, set relative to window height\r\n    this.radius = random(window.innerHeight / 6, window.innerHeight / 3);\r\n\r\n    // starting points in \"time\" for the noise/self similar random values\r\n    this.xOff = random(0, 5000);\r\n    this.yOff = random(0, 5000);\r\n    // how quickly the noise/self similar random values step through time\r\n    this.inc = 0.002;\r\n\r\n    // PIXI.Graphics is used to draw 2d primitives (in this case a circle) to the canvas\r\n    this.graphics = new PIXI.Graphics();\r\n    this.graphics.alpha = 0.825;\r\n\r\n    // 250ms after the last window resize event, recalculate orb positions.\r\n    window.addEventListener(\r\n      'resize',\r\n      debounce(() => {\r\n        this.bounds = this.setBounds();\r\n      }, 250)\r\n    );\r\n  }\r\n  \r\n  setBounds() {\r\n  // how far from the { x, y } origin can each orb move\r\n  const maxDist =\r\n      window.innerWidth < 1000 ? window.innerWidth / 3 : window.innerWidth / 5;\r\n  // the { x, y } origin for each orb (the bottom right of the screen)\r\n  const originX = window.innerWidth / 1.25;\r\n  const originY =\r\n      window.innerWidth < 1000\r\n      ? window.innerHeight\r\n      : window.innerHeight / 1.575;\r\n\r\n  // allow each orb to move x distance away from it's { x, y }origin\r\n  return {\r\n      x: {\r\n      min: originX - maxDist,\r\n      max: originX + maxDist\r\n      },\r\n      y: {\r\n      min: originY - maxDist,\r\n      max: originY + maxDist\r\n      }\r\n  };\r\n}\r\n  \r\n  update() {\r\n  // self similar \"psuedo-random\" or noise values at a given point in \"time\"\r\n  const xNoise = simplex.noise2D(this.xOff, this.xOff);\r\n  const yNoise = simplex.noise2D(this.yOff, this.yOff);\r\n  const scaleNoise = simplex.noise2D(this.xOff, this.yOff);\r\n\r\n  // map the xNoise/yNoise values (between -1 and 1) to a point within the orb's bounds\r\n  this.x = map(xNoise, -1, 1, this.bounds[\"x\"].min, this.bounds[\"x\"].max);\r\n  this.y = map(yNoise, -1, 1, this.bounds[\"y\"].min, this.bounds[\"y\"].max);\r\n  // map scaleNoise (between -1 and 1) to a scale value somewhere between half of the orb's original size, and 100% of it's original size\r\n  this.scale = map(scaleNoise, -1, 1, 0.5, 1);\r\n\r\n  // step through \"time\"\r\n  this.xOff += this.inc;\r\n  this.yOff += this.inc;\r\n}\r\n  \r\n  render() {\r\n  // update the PIXI.Graphics position and scale values\r\n  this.graphics.x = this.x;\r\n  this.graphics.y = this.y;\r\n  this.graphics.scale.set(this.scale);\r\n\r\n  // clear anything currently drawn to graphics\r\n  this.graphics.clear();\r\n\r\n  // tell graphics to fill any shapes drawn after this with the orb's fill color\r\n  this.graphics.beginFill(this.fill);\r\n  // draw a circle at { 0, 0 } with it's size set by this.radius\r\n  this.graphics.drawCircle(0, 0, this.radius);\r\n  // let graphics know we won't be filling in any more shapes\r\n  this.graphics.endFill();\r\n}\r\n  \r\n  \r\n  \r\n}\r\n\r\n\r\n// Create PixiJS app\r\nconst app = new PIXI.Application({\r\n  // render to <canvas class=\"orb-canvas\"></canvas>\r\n  view: document.querySelector('.orb-canvas'),\r\n  // auto adjust size to fit the current window\r\n  resizeTo: window,\r\n  // transparent background, we will be creating a gradient background later using CSS\r\n  transparent: true\r\n});\r\n\r\nconst colorPalette = new ColorPalette();\r\n\r\napp.stage.filters = [new KawaseBlurFilter(30, 10, true)];\r\n\r\n\r\n\r\n\r\n\r\n// Create orbs\r\nconst orbs = [];\r\n\r\nfor (let i = 0; i < 10; i++) {\r\n  // each orb will be black, just for now\r\n  const orb = new Orb(colorPalette.randomColor());\r\n  app.stage.addChild(orb.graphics);\r\n\r\n  orbs.push(orb);\r\n}\r\n\r\n// Animate!\r\nif (!window.matchMedia('(prefers-reduced-motion: reduce)').matches) {\r\n  app.ticker.add(() => {\r\n    // update and render each orb, each frame. app.ticker attempts to run at 60fps\r\n    orbs.forEach((orb) => {\r\n      orb.update();\r\n      orb.render();\r\n    });\r\n  });\r\n} else {\r\n  // perform one update and render per orb, do not animate\r\n  orbs.forEach((orb) => {\r\n    orb.update();\r\n    orb.render();\r\n  });\r\n}\r\n\r\ndocument\r\n  .querySelector('.overlay__btn--colors')\r\n  .addEventListener('click', () => {\r\n    colorPalette.setColors();\r\n    colorPalette.setCustomProperties();\r\n\r\n    orbs.forEach((orb) => {\r\n      orb.fill = colorPalette.randomColor();\r\n    });\r\n  });"],"names":[],"version":3,"file":"index.b2d9dab9.js.map","sourceRoot":"/__parcel_source_root/"}